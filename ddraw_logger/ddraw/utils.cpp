// Copyright (c) 2014 Jérémy Ansel
// Licensed under the MIT license. See LICENSE.txt

#include "common.h"
#include "utils.h"
#include "CoMemPtr.h"

#define TOSTR_HR(R) case R: return "\t" #R;

std::string tostr_HR(HRESULT hr)
{
	switch (hr)
	{
		TOSTR_HR(S_OK);
		TOSTR_HR(S_FALSE);
		TOSTR_HR(E_NOTIMPL);
		TOSTR_HR(E_FAIL);
		TOSTR_HR(E_INVALIDARG);
		TOSTR_HR(E_OUTOFMEMORY);
		TOSTR_HR(CO_E_NOTINITIALIZED);
		TOSTR_HR(DDERR_ALREADYINITIALIZED);
		TOSTR_HR(DDERR_CANNOTATTACHSURFACE);
		TOSTR_HR(DDERR_CANNOTDETACHSURFACE);
		TOSTR_HR(DDERR_CURRENTLYNOTAVAIL);
		TOSTR_HR(DDERR_EXCEPTION);
		TOSTR_HR(DDERR_HEIGHTALIGN);
		TOSTR_HR(DDERR_INCOMPATIBLEPRIMARY);
		TOSTR_HR(DDERR_INVALIDCAPS);
		TOSTR_HR(DDERR_INVALIDCLIPLIST);
		TOSTR_HR(DDERR_INVALIDMODE);
		TOSTR_HR(DDERR_INVALIDOBJECT);
		TOSTR_HR(DDERR_INVALIDPIXELFORMAT);
		TOSTR_HR(DDERR_INVALIDRECT);
		TOSTR_HR(DDERR_LOCKEDSURFACES);
		TOSTR_HR(DDERR_NO3D);
		TOSTR_HR(DDERR_NOALPHAHW);
		TOSTR_HR(DDERR_NOSTEREOHARDWARE);
		TOSTR_HR(DDERR_NOSURFACELEFT);
		TOSTR_HR(DDERR_NOCLIPLIST);
		TOSTR_HR(DDERR_NOCOLORCONVHW);
		TOSTR_HR(DDERR_NOCOOPERATIVELEVELSET);
		TOSTR_HR(DDERR_NOCOLORKEY);
		TOSTR_HR(DDERR_NOCOLORKEYHW);
		TOSTR_HR(DDERR_NODIRECTDRAWSUPPORT);
		TOSTR_HR(DDERR_NOEXCLUSIVEMODE);
		TOSTR_HR(DDERR_NOFLIPHW);
		TOSTR_HR(DDERR_NOGDI);
		TOSTR_HR(DDERR_NOMIRRORHW);
		TOSTR_HR(DDERR_NOTFOUND);
		TOSTR_HR(DDERR_NOOVERLAYHW);
		TOSTR_HR(DDERR_OVERLAPPINGRECTS);
		TOSTR_HR(DDERR_NORASTEROPHW);
		TOSTR_HR(DDERR_NOROTATIONHW);
		TOSTR_HR(DDERR_NOSTRETCHHW);
		TOSTR_HR(DDERR_NOT4BITCOLOR);
		TOSTR_HR(DDERR_NOT4BITCOLORINDEX);
		TOSTR_HR(DDERR_NOT8BITCOLOR);
		TOSTR_HR(DDERR_NOTEXTUREHW);
		TOSTR_HR(DDERR_NOVSYNCHW);
		TOSTR_HR(DDERR_NOZBUFFERHW);
		TOSTR_HR(DDERR_NOZOVERLAYHW);
		TOSTR_HR(DDERR_OUTOFCAPS);
		TOSTR_HR(DDERR_OUTOFVIDEOMEMORY);
		TOSTR_HR(DDERR_OVERLAYCANTCLIP);
		TOSTR_HR(DDERR_OVERLAYCOLORKEYONLYONEACTIVE);
		TOSTR_HR(DDERR_PALETTEBUSY);
		TOSTR_HR(DDERR_COLORKEYNOTSET);
		TOSTR_HR(DDERR_SURFACEALREADYATTACHED);
		TOSTR_HR(DDERR_SURFACEALREADYDEPENDENT);
		TOSTR_HR(DDERR_SURFACEBUSY);
		TOSTR_HR(DDERR_CANTLOCKSURFACE);
		TOSTR_HR(DDERR_SURFACEISOBSCURED);
		TOSTR_HR(DDERR_SURFACELOST);
		TOSTR_HR(DDERR_SURFACENOTATTACHED);
		TOSTR_HR(DDERR_TOOBIGHEIGHT);
		TOSTR_HR(DDERR_TOOBIGSIZE);
		TOSTR_HR(DDERR_TOOBIGWIDTH);
		TOSTR_HR(DDERR_UNSUPPORTEDFORMAT);
		TOSTR_HR(DDERR_UNSUPPORTEDMASK);
		TOSTR_HR(DDERR_INVALIDSTREAM);
		TOSTR_HR(DDERR_VERTICALBLANKINPROGRESS);
		TOSTR_HR(DDERR_WASSTILLDRAWING);
		TOSTR_HR(DDERR_DDSCAPSCOMPLEXREQUIRED);
		TOSTR_HR(DDERR_XALIGN);
		TOSTR_HR(DDERR_INVALIDDIRECTDRAWGUID);
		TOSTR_HR(DDERR_DIRECTDRAWALREADYCREATED);
		TOSTR_HR(DDERR_NODIRECTDRAWHW);
		TOSTR_HR(DDERR_PRIMARYSURFACEALREADYEXISTS);
		TOSTR_HR(DDERR_NOEMULATION);
		TOSTR_HR(DDERR_REGIONTOOSMALL);
		TOSTR_HR(DDERR_CLIPPERISUSINGHWND);
		TOSTR_HR(DDERR_NOCLIPPERATTACHED);
		TOSTR_HR(DDERR_NOHWND);
		TOSTR_HR(DDERR_HWNDSUBCLASSED);
		TOSTR_HR(DDERR_HWNDALREADYSET);
		TOSTR_HR(DDERR_NOPALETTEATTACHED);
		TOSTR_HR(DDERR_NOPALETTEHW);
		TOSTR_HR(DDERR_BLTFASTCANTCLIP);
		TOSTR_HR(DDERR_NOBLTHW);
		TOSTR_HR(DDERR_NODDROPSHW);
		TOSTR_HR(DDERR_OVERLAYNOTVISIBLE);
		TOSTR_HR(DDERR_NOOVERLAYDEST);
		TOSTR_HR(DDERR_INVALIDPOSITION);
		TOSTR_HR(DDERR_NOTAOVERLAYSURFACE);
		TOSTR_HR(DDERR_EXCLUSIVEMODEALREADYSET);
		TOSTR_HR(DDERR_NOTFLIPPABLE);
		TOSTR_HR(DDERR_CANTDUPLICATE);
		TOSTR_HR(DDERR_NOTLOCKED);
		TOSTR_HR(DDERR_CANTCREATEDC);
		TOSTR_HR(DDERR_NODC);
		TOSTR_HR(DDERR_WRONGMODE);
		TOSTR_HR(DDERR_IMPLICITLYCREATED);
		TOSTR_HR(DDERR_NOTPALETTIZED);
		TOSTR_HR(DDERR_UNSUPPORTEDMODE);
		TOSTR_HR(DDERR_NOMIPMAPHW);
		TOSTR_HR(DDERR_INVALIDSURFACETYPE);
		TOSTR_HR(DDERR_NOOPTIMIZEHW);
		TOSTR_HR(DDERR_NOTLOADED);
		TOSTR_HR(DDERR_NOFOCUSWINDOW);
		TOSTR_HR(DDERR_NOTONMIPMAPSUBLEVEL);
		TOSTR_HR(DDERR_DCALREADYCREATED);
		TOSTR_HR(DDERR_NONONLOCALVIDMEM);
		TOSTR_HR(DDERR_CANTPAGELOCK);
		TOSTR_HR(DDERR_CANTPAGEUNLOCK);
		TOSTR_HR(DDERR_NOTPAGELOCKED);
		TOSTR_HR(DDERR_MOREDATA);
		TOSTR_HR(DDERR_EXPIRED);
		TOSTR_HR(DDERR_TESTFINISHED);
		TOSTR_HR(DDERR_NEWMODE);
		TOSTR_HR(DDERR_D3DNOTINITIALIZED);
		TOSTR_HR(DDERR_VIDEONOTACTIVE);
		TOSTR_HR(DDERR_NOMONITORINFORMATION);
		TOSTR_HR(DDERR_NODRIVERSUPPORT);
		TOSTR_HR(DDERR_DEVICEDOESNTOWNSURFACE);
	}

	std::ostringstream str;
	str << "\t" << hr;
	return str.str();
}

#define TOSTR_IID(I) if(*lpGUID == IID_ ## I) { return " " #I; }

std::string tostr_GUID(const GUID* lpGUID)
{
	if (lpGUID == nullptr)
	{
		return " NULL";
	}
	
	if ((DWORD)lpGUID == DDCREATE_EMULATIONONLY)
	{
		return " DDCREATE_EMULATIONONLY";
	}

	if ((DWORD)lpGUID == DDCREATE_HARDWAREONLY)
	{
		return " DDCREATE_HARDWAREONLY";
	}

	TOSTR_IID(IUnknown);
	TOSTR_IID(IDirectDraw);
	TOSTR_IID(IDirectDraw2);
	TOSTR_IID(IDirectDraw4);
	TOSTR_IID(IDirectDrawSurface);
	TOSTR_IID(IDirect3D);
	TOSTR_IID(IDirect3DDevice);
	TOSTR_IID(IDirect3DRampDevice);
	TOSTR_IID(IDirect3DRGBDevice);
	TOSTR_IID(IDirect3DHALDevice);
	TOSTR_IID(IDirect3DTexture);

	CoMemPtr<OLECHAR> lpsz;
	StringFromIID(*lpGUID, &lpsz);

	std::wstring wstr(lpsz);
	std::string str(wstr.begin(), wstr.end());

	return std::string(" ").append(str);
}

std::string tostr_RECT(LPRECT lpRect)
{
	if (lpRect == nullptr)
	{
		return " NULL";
	}

	std::ostringstream str;

	str << " " << lpRect->left;
	str << "," << lpRect->top;
	str << "," << lpRect->right;
	str << "," << lpRect->bottom;

	return str.str();
}

std::string tostr_DDSURFACEDESC(LPDDSURFACEDESC lpDDSurfaceDesc)
{
	if (lpDDSurfaceDesc == nullptr)
	{
		return " NULL";
	}

	std::ostringstream str;

	DWORD dwFlags = lpDDSurfaceDesc->dwFlags;

	if (dwFlags & DDSD_CAPS)
	{
		DWORD dwCaps = lpDDSurfaceDesc->ddsCaps.dwCaps;

		STR_ENUM(dwCaps, DDSCAPS, ALPHA);
		STR_ENUM(dwCaps, DDSCAPS, BACKBUFFER);
		STR_ENUM(dwCaps, DDSCAPS, COMPLEX);
		STR_ENUM(dwCaps, DDSCAPS, FLIP);
		STR_ENUM(dwCaps, DDSCAPS, FRONTBUFFER);
		STR_ENUM(dwCaps, DDSCAPS, OFFSCREENPLAIN);
		STR_ENUM(dwCaps, DDSCAPS, OVERLAY);
		STR_ENUM(dwCaps, DDSCAPS, PALETTE);
		STR_ENUM(dwCaps, DDSCAPS, PRIMARYSURFACE);
		STR_ENUM(dwCaps, DDSCAPS, SYSTEMMEMORY);
		STR_ENUM(dwCaps, DDSCAPS, TEXTURE);
		STR_ENUM(dwCaps, DDSCAPS, 3DDEVICE);
		STR_ENUM(dwCaps, DDSCAPS, VIDEOMEMORY);
		STR_ENUM(dwCaps, DDSCAPS, VISIBLE);
		STR_ENUM(dwCaps, DDSCAPS, WRITEONLY);
		STR_ENUM(dwCaps, DDSCAPS, ZBUFFER);
		STR_ENUM(dwCaps, DDSCAPS, OWNDC);
		STR_ENUM(dwCaps, DDSCAPS, LIVEVIDEO);
		STR_ENUM(dwCaps, DDSCAPS, HWCODEC);
		STR_ENUM(dwCaps, DDSCAPS, MODEX);
		STR_ENUM(dwCaps, DDSCAPS, MIPMAP);
		STR_ENUM(dwCaps, DDSCAPS, ALLOCONLOAD);
		STR_ENUM(dwCaps, DDSCAPS, VIDEOPORT);
		STR_ENUM(dwCaps, DDSCAPS, LOCALVIDMEM);
		STR_ENUM(dwCaps, DDSCAPS, NONLOCALVIDMEM);
		STR_ENUM(dwCaps, DDSCAPS, STANDARDVGAMODE);
		STR_ENUM(dwCaps, DDSCAPS, OPTIMIZED);
	}

	if (dwFlags & (DDSD_HEIGHT | DDSD_WIDTH))
	{
		str << " " << lpDDSurfaceDesc->dwWidth << "x" << lpDDSurfaceDesc->dwHeight;
	}

	if (dwFlags & DDSD_PITCH)
	{

	}

	if (dwFlags & DDSD_BACKBUFFERCOUNT)
	{
		str << " " << lpDDSurfaceDesc->dwBackBufferCount << " back buffers";
	}

	if (dwFlags & DDSD_ZBUFFERBITDEPTH)
	{

	}

	if (dwFlags & DDSD_ALPHABITDEPTH)
	{

	}

	if (dwFlags & DDSD_LPSURFACE)
	{

	}

	if (dwFlags & DDSD_PIXELFORMAT)
	{
		DDPIXELFORMAT& ddpf = lpDDSurfaceDesc->ddpfPixelFormat;

		if (ddpf.dwFlags & DDPF_RGB)
		{
			str << " " << ddpf.dwRGBBitCount << " bpp";
		}
	}

	if (dwFlags & DDSD_CKDESTOVERLAY)
	{

	}

	if (dwFlags & DDSD_CKDESTBLT)
	{

	}

	if (dwFlags & DDSD_CKSRCOVERLAY)
	{

	}

	if (dwFlags & DDSD_CKSRCBLT)
	{

	}

	if (dwFlags & DDSD_MIPMAPCOUNT)
	{
		str << " " << lpDDSurfaceDesc->dwMipMapCount << " mipmaps";
	}

	if (dwFlags & DDSD_REFRESHRATE)
	{
		if (lpDDSurfaceDesc->dwRefreshRate == 0)
		{
			str << " default Hz";
		}
		else
		{
			str << " " << lpDDSurfaceDesc->dwRefreshRate << " Hz";
		}
	}

	if (dwFlags & DDSD_LINEARSIZE)
	{

	}

	return str.str();
}

std::string tostr_D3DRECT(LPD3DRECT lpRect)
{
	if (lpRect == nullptr)
	{
		return " NULL";
	}

	std::ostringstream str;

	str << " " << lpRect->x1;
	str << "," << lpRect->y1;
	str << ";" << lpRect->x2;
	str << "," << lpRect->y2;

	return str.str();
}
